/* tslint:disable */
/* eslint-disable */
/**
 * Gnome API
 * Gnome Backend 
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface LoginDTO
 */
export interface LoginDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginDTO
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginDTO
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface LoginResultDTO
 */
export interface LoginResultDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginResultDTO
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResultDTO
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResultDTO
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface SecretPlanDTO
 */
export interface SecretPlanDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof SecretPlanDTO
     */
    points?: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDTO} loginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginDTO: LoginDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDTO' is not null or undefined
            assertParamExists('login', 'loginDTO', loginDTO)
            const localVarPath = `/api/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretplan: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/getplan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDTO} loginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginDTO: LoginDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretplan(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecretPlanDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretplan(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginDTO} loginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDTO: LoginDTO, options?: any): AxiosPromise<LoginResultDTO> {
            return localVarFp.login(loginDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretplan(options?: any): AxiosPromise<SecretPlanDTO> {
            return localVarFp.secretplan(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {LoginDTO} loginDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(loginDTO: LoginDTO, options?: any) {
        return DefaultApiFp(this.configuration).login(loginDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public secretplan(options?: any) {
        return DefaultApiFp(this.configuration).secretplan(options).then((request) => request(this.axios, this.basePath));
    }
}


